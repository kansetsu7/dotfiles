dump_db() {
  dir=${$(pwd):t}
  if [[ "$dir" == 'amoeba' || "$dir" == 'cam' ]]; then
    echo 'in amoeba / cam'
    PGPORT=15432 $PROJECT_PATH/vm/scripts/dump_db.zsh "$@"
  else
    $PROJECT_PATH/vm/scripts/dump_db.zsh "$@"
  fi
}

# sync clipboard between mac and docker {{{
socat_started(){
  lsof -i :"$1" | grep -q socat
}

sync_docker_clipboard(){
  if ! $(socat_started 8377); then
    socat TCP-LISTEN:8377,reuseaddr,fork SYSTEM:"pbcopy" &
  fi
  if ! $(socat_started 8378); then
    socat TCP-LISTEN:8378,reuseaddr,fork EXEC:"pbpaste" &
  fi
}
# }}}

# 重啟 puma/unicorn（非 daemon 模式，用於 pry debug）
rpy() {
  if bundle show pry-remote > /dev/null 2>&1; then
    bundle exec pry-remote
  else
    rpu pry
  fi
}

# 重啟 puma/unicorn
#
# - rpu       → 啟動或重啟（如果已有 pid）
# - rpu kill  → 殺掉 process，不重啟
# - rpu xxx   → xxx 參數會被丟給 pumactl（不支援 unicorn）
rpu() {
  # remember to update rpy if site-codes changed
  [[ $PWD =~ '(.*amoeba|.*cam|.*ck|.*sg|.*ave_ck|.*hk|.*angel)' ]] && folder_path=$match[1]
  cd $folder_path

  echo "path: $folder_path"

  emulate -L zsh
  if [[ -d tmp ]]; then
    local action=$1
    local pid
    local animal

    if [[ -f config/puma.rb ]]; then
      animal='puma'
    elif [[ -f config/unicorn.rb ]]; then
      animal='unicorn'
    else
      echo "No puma/unicorn directory, aborted."
      return 1
    fi

    if [[ -r tmp/pids/$animal.pid && -n $(ps h -p `cat tmp/pids/$animal.pid` | tr -d ' ') ]]; then
      pid=`cat tmp/pids/$animal.pid`
    fi

    if [[ -n $action ]]; then
      case "$action" in
        pry)
          if [[ -n $pid ]]; then
            kill -9 $pid && echo "Process killed ($pid)."
          fi
          rserver_restart $animal
          ;;
        kill)
          if [[ -n $pid ]]; then
            kill -9 $pid && echo "Process killed ($pid)."
          else
            echo "No process found."
          fi
          ;;
        *)
          if [[ -n $pid ]]; then
            # TODO: control unicorn
            pumactl -p $pid $action
          else
            echo 'ERROR: "No running PID (tmp/pids/puma.pid).'
          fi
      esac
    else
      if [[ -n $pid ]]; then
        # Alternatives:
        # pumactl -p $pid restart
        # kill -USR2 $pid && echo "Process killed ($pid)."

        # kill -9 (SIGKILL) for force kill
        kill -9 $pid && echo "Process killed ($pid)."
        rserver_restart $animal $([[ "$animal" == 'puma' ]] && echo '-d' || echo '-D')
      else
        rserver_restart $animal $([[ "$animal" == 'puma' ]] && echo '-d' || echo '-D')
      fi
    fi
  else
    echo 'ERROR: "tmp" directory not found.'
  fi
}

rserver_restart() {
  local app=${$(pwd):t}
  # remember to update rpu if site-codes changed
  [[ ! $app =~ '^(amoeba|cam|hk|ck|sg|ave_ck|angel)' ]] && app='nerv' # support app not named 'nerv' (e.g., nerv2)
  echo "RAILS_RELATIVE_URL_ROOT=$app"

  case "$1" in
    puma)
      shift
      RAILS_RELATIVE_URL_ROOT=/$app bundle exec puma -C config/puma.rb config.ru $*
      ;;
    unicorn)
      shift
      RAILS_RELATIVE_URL_ROOT=/$app bundle exec unicorn -c config/unicorn.rb $* && echo 'unicorn running'
      ;;
    *)
      echo 'invalid argument'
  esac
}

nrw() {
  local folder_path
  local folder_name
  local asuka_path

  [[ $PWD =~ '(.*ave_ck|.*sg|.*nerv_nz|.*ck|.*hk)' ]] && folder_path=$match[1]
  if [[ $folder_path =~ '.*(ave_ck)$' ]]; then
    folder_name='ave_ck'
  elif [[ $folder_path =~ '.*(sg|nerv_nz|ck|hk)$' ]]; then
    folder_name=$match[1]
  fi

  asuka_path="$folder_path/clojure/projects/asuka"

  echo "run npm for $asuka_path, set NERV_BASE=$folder_name"
  cd $asuka_path && DEV_DARK_MODE=true NERV_BASE=/${=folder_name} npm run watch
}

start_all_server() {
  tmux splitw -v -p 80 \; selectp -U \; splitw -h -p 66 \; splitw -h -p 50 \;
  tmux send-keys -t 1 C-z 'nrw' Enter
  tmux send-keys -t 2 C-z 'cjn' Enter
  tmux send-keys -t 3 C-z 'bundle exec rake sneakers:run' Enter
  tmux send-keys -t 4 C-z 'rpu' Enter
}

docker-attach() {  # pair host must have this
  # CONTAINER=$(docker ps --format "{{.Names}}" | grep "^edit" | head -n 1)
  CONTAINER='e3'
  if [ -n "$CONTAINER" ]; then
    echo "Connecting to container $CONTAINER..."
    docker exec -it $CONTAINER tmux attach || echo "No tmux session in container $CONTAINER"
  else
    echo "Error: no container start with 'edit-' found running"
  fi
}
