# My functions

dumplog() {
  local folder
  local file_pattern

  if [[ $# -ge 1 ]]; then
    case $1 in
      hk)
        folder="nerv_production_log"
        ;;
      ck)
        folder="nerv_production_log_ck"
        ;;
      sg)
        folder="nerv_production_log_sg"
        ;;
      ave_ck)
        folder="nerv_production_log_ave_ck"
        ;;
    esac
  fi
  if [[ $# -eq 1 ]]; then
    file_pattern="/production.log*"
  fi
  if [[ $# -eq 2 ]]; then
    file_pattern="/$2*"
  fi

  scp -r xfiles.abagile.aws.kr:~/$folder$file_pattern ~/tmp/$folder

  echo "log downloaded to ~/tmp/$folder"
}

check_and_upgrade_clj_kondo() {
  latest_ver=`curl --silent "https://api.github.com/repos/clj-kondo/clj-kondo/releases/latest" | grep '"tag_name":' | gsed -E 's/.*"([^"]+)".*/\1/'`
  local_ver=`clj-kondo --version | gsed -E 's/clj-kondo //g'`
  if [[ "$local_ver" != "$latest_ver" ]]; then
    if [[ "`uname -s`" == "Darwin" ]]; then # macOS
      echo "Version too old ($local_ver), auto update to $latest_ver..."
      brew upgrade clj-kondo && echo "Done!"
    else
      echo "Version too old ($local_ver), please install latest version ($latest_ver) of clj-kondo before lint."
      echo "Ref: https://github.com/clj-kondo/clj-kondo/blob/master/doc/install.md#installation-script-macos-and-linux"
    fi
  fi
}

lint() {
  [[ $PWD =~ '(.*ck|.*sg|.*nerv_nz|.*ave_ck|.*hk|.*awesome_name|.*master_of_coin)' ]] && project_path=$match[1]

  if [[ $project_path ]]; then
    local exts=('clj,cljs,cljc,edn')
    local files=$(eval "git diff master... --diff-filter=d --name-only -- \*.{$exts}")

    if [[ -n "$files" ]]; then
      check_and_upgrade_clj_kondo
      # echo $files
      if [[ $project_path =~  '(.*ck|.*sg|.*nerv_nz|.*ave_ck|.*hk)' ]]; then
        cd "$project_path/clojure" && echo $files | gsed -E 's/clojure\///g' | xargs clj-kondo --lint
      elif [[ $project_path =~ '(.*awesome_name|.*master_of_coin)' ]]; then
        clj-kondo --lint
      else
      fi
    else
      echo "Nothing to check. Write some *.{$exts} to check."
    fi

    # cd "$project_path/clojure" && "$project_path/eva/asuka/bin/lint"
    # git diff master... --name-only -- \*.{clj,cljs,edn} | gsed -E 's/clojure\///g' | xargs clj-kondo --lint
  fi
}

bulk_search_and_replace() {
  rg $1 -l | xargs gsed -i "s/$1/$2/g"
}

cd_adam() {
  local folder_path
  local adam_path

  [[ $PWD =~ '(.*ck|.*sg|.*nerv_nz|.*ave_ck|.*hk)' ]] && folder_path=$match[1]

  cd "$folder_path/clojure/projects/adam"
}

amoeba_test_reset() {
  RAILS_ENV=test be rake db:drop
  RAILS_ENV=test be rake db:create
  RAILS_ENV=test be rake db:schema:load
  RAILS_ENV=test be rake db:seed
}

tx() {
  if ! tmux has-session -t work 2> /dev/null; then
    tmux new -s work -d;
    # tmux splitw -h -p 40 -t work;
    # tmux select-p -t 1;
  fi
  tmux attach -t work;
}

# git functions {{{
rebase_func() {
  # command git rebase -i "HEAD~$1"
  # git rebase -i "HEAD~$1"
  git rebase -i "HEAD~$1"
}
git_branch_current() {
  git rev-parse --abbrev-ref HEAD
}
# }}}

# rg functions {{{
rg_method_def() {
  rg "def $1"
}

rg_pcre2() {
  # rg -P => support look-around
  if [ -n "$2" ]; then
    rg -P $1 $2
  else
    rg -P $1
  fi
}
#}}}

clean_tmp() {
  ls -d ./tmp/* | grep -P "tmp/statement_.*.pdf$" | xargs -d"\n" rm
  ls -d ./tmp/* | grep -P "tmp/valuation_logo_.*.pdf$" | xargs -d"\n" rm
}

asset_size() {
  rake assets:precompile
  du -sh public/assets
  rake assets:clobber
}

# Git related {{{
switch_to_tmp_branch() {
  [[ $PWD =~ '(ck|sg|hk|ave_ck)' ]] && project_name=$match[1]
  case $project_name in
    hk)
      branch_name="hk"
      ;;
    ck)
      branch_name="ck"
      ;;
    sg)
      branch_name="sg"
      ;;
    ave_ck)
      branch_name="ave_ck"
      ;;
    *)
      branch_name="master"
      ;;
  esac

  gco "andre/$branch_name"
  git rebase master
}

gcm_and_gbd_current_branch() {
  branch_name=`git rev-parse --abbrev-ref HEAD`
  git checkout master
  gbd $branch_name
  switch_to_tmp_branch
}
# }}}

dhq() {
  cd $PROJECT_PATH/vm/docker-dev
  if [[ $# -ge 1 ]]; then
    case $1 in
      up)
        echo "running: docker compose -f hq/compose.yml up -d"
        docker compose -f hq/compose.yml up -d
        ;;
      down)
        echo "running: docker compose -f hq/compose.yml down"
        docker compose -f hq/compose.yml down
        ;;
    esac
  fi
}
